
/**
 * Copyright (C) 2013 Simon Busch <morphis@gravedo.de>
 *               2012 Canonical Ltd
 *               2013 Jolla Ltd.
 *
 * Auto-generated via "generate_wrapper_macros.py"
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 **/
/* Modified by Shuyong Chen <shuyong.chen@gmail.com> */

#ifndef HYBRIS_BINDING_H_
#define HYBRIS_BINDING_H_

/* floating_point_abi.h defines FP_ATTRIB */
#include <hybris/common/floating_point_abi.h>

#include "Message.h"
#include "Client.h"

extern void *android_dlopen (const char *filename, int flags);
extern int   android_dlclose(void *handle);
extern char *android_dlerror(void);
extern void *android_dlsym  (void *handle, const char *symbol);


/**
 *         XXX AUTO-GENERATED FILE XXX
 *
 * Do not edit this file directly, but update the templates in
 * utils/generate_wrapper_macros.py and run it again to build
 * an updated version of this header file:
 *
 *    python utils/generate_wrapper_macros.py > \
 *       hybris/include/hybris/internal/binding.h
 *
 * If you need macros with more arguments, just customize the
 * MAX_ARGS variable in generate_wrapper_macros.py.
 *
 *         XXX AUTO-GENERATED FILE XXX
 **/


#define HYBRIS_DLSYSM(module, fptr, sym) \
    if (!module##_handle) \
        hybris_##module##_initialize(); \
    if (*(fptr) == NULL) \
    { \
        *(fptr) = (void *) android_dlsym(module##_handle, sym); \
    }

#define HYBRIS_LIBRARY_INITIALIZE(module, path) \
    void *module##_handle; \
    void hybris_##module##_initialize() \
    { \
        module##_handle = android_dlopen(path, RTLD_LAZY); \
    }

#define HYBRIS_LIRBARY_CHECK_SYMBOL(module) \
    int hybris_##module##_check_for_symbol(const char *sym) \
    { \
        return android_dlsym(module##_handle, sym) != NULL; \
    }



#define HYBRIS_IMPLEMENT_FUNCTION0(module, return_type, symbol) \
    typedef struct Message_##symbol { \
        Message common; \
        ; \
        return_type result; \
    } Message_##symbol; \
    static return_type (*__dl_##symbol)() FP_ATTRIB = NULL; \
    static void* handleMessage_##symbol (Message_##symbol* message) FP_ATTRIB; \
    static void* handleMessage_##symbol (Message_##symbol* message) \
    { \
        ; \
        return_type result; \
        result = __dl_##symbol(); \
        message->result = result; \
        return 0; \
    } \
    return_type symbol() \
    { \
        HYBRIS_DLSYSM(module, &__dl_##symbol, #symbol); \
        MessageHandler handler[1]; \
        Message_##symbol message[1]; \
        handler->handleMessage = (void *(*) (Message* ))handleMessage_##symbol; \
        ; \
        (void)MessageQueue_push_message(get_call_queue(), (Message* )message, handler); \
        return message->result; \
    }


#define HYBRIS_IMPLEMENT_FUNCTION1(module, return_type, symbol, a1) \
    typedef struct Message_##symbol { \
        Message common; \
        a1 n1; \
        return_type result; \
    } Message_##symbol; \
    static return_type (*__dl_##symbol)(a1) FP_ATTRIB = NULL; \
    static void* handleMessage_##symbol (Message_##symbol* message) FP_ATTRIB; \
    static void* handleMessage_##symbol (Message_##symbol* message) \
    { \
        a1 n1 = message->n1; \
        return_type result; \
        result = __dl_##symbol(n1); \
        message->result = result; \
        return 0; \
    } \
    return_type symbol(a1 n1) \
    { \
        HYBRIS_DLSYSM(module, &__dl_##symbol, #symbol); \
        MessageHandler handler[1]; \
        Message_##symbol message[1]; \
        handler->handleMessage = (void *(*) (Message* ))handleMessage_##symbol; \
        message->n1 = n1; \
        (void)MessageQueue_push_message(get_call_queue(), (Message* )message, handler); \
        return message->result; \
    }


#define HYBRIS_IMPLEMENT_FUNCTION2(module, return_type, symbol, a1, a2) \
    typedef struct Message_##symbol { \
        Message common; \
        a1 n1; a2 n2; \
        return_type result; \
    } Message_##symbol; \
    static return_type (*__dl_##symbol)(a1, a2) FP_ATTRIB = NULL; \
    static void* handleMessage_##symbol (Message_##symbol* message) FP_ATTRIB; \
    static void* handleMessage_##symbol (Message_##symbol* message) \
    { \
        a1 n1 = message->n1; a2 n2 = message->n2; \
        return_type result; \
        result = __dl_##symbol(n1, n2); \
        message->result = result; \
        return 0; \
    } \
    return_type symbol(a1 n1, a2 n2) \
    { \
        HYBRIS_DLSYSM(module, &__dl_##symbol, #symbol); \
        MessageHandler handler[1]; \
        Message_##symbol message[1]; \
        handler->handleMessage = (void *(*) (Message* ))handleMessage_##symbol; \
        message->n1 = n1; message->n2 = n2; \
        (void)MessageQueue_push_message(get_call_queue(), (Message* )message, handler); \
        return message->result; \
    }


#define HYBRIS_IMPLEMENT_FUNCTION3(module, return_type, symbol, a1, a2, a3) \
    typedef struct Message_##symbol { \
        Message common; \
        a1 n1; a2 n2; a3 n3; \
        return_type result; \
    } Message_##symbol; \
    static return_type (*__dl_##symbol)(a1, a2, a3) FP_ATTRIB = NULL; \
    static void* handleMessage_##symbol (Message_##symbol* message) FP_ATTRIB; \
    static void* handleMessage_##symbol (Message_##symbol* message) \
    { \
        a1 n1 = message->n1; a2 n2 = message->n2; a3 n3 = message->n3; \
        return_type result; \
        result = __dl_##symbol(n1, n2, n3); \
        message->result = result; \
        return 0; \
    } \
    return_type symbol(a1 n1, a2 n2, a3 n3) \
    { \
        HYBRIS_DLSYSM(module, &__dl_##symbol, #symbol); \
        MessageHandler handler[1]; \
        Message_##symbol message[1]; \
        handler->handleMessage = (void *(*) (Message* ))handleMessage_##symbol; \
        message->n1 = n1; message->n2 = n2; message->n3 = n3; \
        (void)MessageQueue_push_message(get_call_queue(), (Message* )message, handler); \
        return message->result; \
    }


#define HYBRIS_IMPLEMENT_FUNCTION4(module, return_type, symbol, a1, a2, a3, a4) \
    typedef struct Message_##symbol { \
        Message common; \
        a1 n1; a2 n2; a3 n3; a4 n4; \
        return_type result; \
    } Message_##symbol; \
    static return_type (*__dl_##symbol)(a1, a2, a3, a4) FP_ATTRIB = NULL; \
    static void* handleMessage_##symbol (Message_##symbol* message) FP_ATTRIB; \
    static void* handleMessage_##symbol (Message_##symbol* message) \
    { \
        a1 n1 = message->n1; a2 n2 = message->n2; a3 n3 = message->n3; a4 n4 = message->n4; \
        return_type result; \
        result = __dl_##symbol(n1, n2, n3, n4); \
        message->result = result; \
        return 0; \
    } \
    return_type symbol(a1 n1, a2 n2, a3 n3, a4 n4) \
    { \
        HYBRIS_DLSYSM(module, &__dl_##symbol, #symbol); \
        MessageHandler handler[1]; \
        Message_##symbol message[1]; \
        handler->handleMessage = (void *(*) (Message* ))handleMessage_##symbol; \
        message->n1 = n1; message->n2 = n2; message->n3 = n3; message->n4 = n4; \
        (void)MessageQueue_push_message(get_call_queue(), (Message* )message, handler); \
        return message->result; \
    }


#define HYBRIS_IMPLEMENT_FUNCTION5(module, return_type, symbol, a1, a2, a3, a4, a5) \
    typedef struct Message_##symbol { \
        Message common; \
        a1 n1; a2 n2; a3 n3; a4 n4; a5 n5; \
        return_type result; \
    } Message_##symbol; \
    static return_type (*__dl_##symbol)(a1, a2, a3, a4, a5) FP_ATTRIB = NULL; \
    static void* handleMessage_##symbol (Message_##symbol* message) FP_ATTRIB; \
    static void* handleMessage_##symbol (Message_##symbol* message) \
    { \
        a1 n1 = message->n1; a2 n2 = message->n2; a3 n3 = message->n3; a4 n4 = message->n4; a5 n5 = message->n5; \
        return_type result; \
        result = __dl_##symbol(n1, n2, n3, n4, n5); \
        message->result = result; \
        return 0; \
    } \
    return_type symbol(a1 n1, a2 n2, a3 n3, a4 n4, a5 n5) \
    { \
        HYBRIS_DLSYSM(module, &__dl_##symbol, #symbol); \
        MessageHandler handler[1]; \
        Message_##symbol message[1]; \
        handler->handleMessage = (void *(*) (Message* ))handleMessage_##symbol; \
        message->n1 = n1; message->n2 = n2; message->n3 = n3; message->n4 = n4; message->n5 = n5; \
        (void)MessageQueue_push_message(get_call_queue(), (Message* )message, handler); \
        return message->result; \
    }


#define HYBRIS_IMPLEMENT_FUNCTION6(module, return_type, symbol, a1, a2, a3, a4, a5, a6) \
    typedef struct Message_##symbol { \
        Message common; \
        a1 n1; a2 n2; a3 n3; a4 n4; a5 n5; a6 n6; \
        return_type result; \
    } Message_##symbol; \
    static return_type (*__dl_##symbol)(a1, a2, a3, a4, a5, a6) FP_ATTRIB = NULL; \
    static void* handleMessage_##symbol (Message_##symbol* message) FP_ATTRIB; \
    static void* handleMessage_##symbol (Message_##symbol* message) \
    { \
        a1 n1 = message->n1; a2 n2 = message->n2; a3 n3 = message->n3; a4 n4 = message->n4; a5 n5 = message->n5; a6 n6 = message->n6; \
        return_type result; \
        result = __dl_##symbol(n1, n2, n3, n4, n5, n6); \
        message->result = result; \
        return 0; \
    } \
    return_type symbol(a1 n1, a2 n2, a3 n3, a4 n4, a5 n5, a6 n6) \
    { \
        HYBRIS_DLSYSM(module, &__dl_##symbol, #symbol); \
        MessageHandler handler[1]; \
        Message_##symbol message[1]; \
        handler->handleMessage = (void *(*) (Message* ))handleMessage_##symbol; \
        message->n1 = n1; message->n2 = n2; message->n3 = n3; message->n4 = n4; message->n5 = n5; message->n6 = n6; \
        (void)MessageQueue_push_message(get_call_queue(), (Message* )message, handler); \
        return message->result; \
    }


#define HYBRIS_IMPLEMENT_FUNCTION7(module, return_type, symbol, a1, a2, a3, a4, a5, a6, a7) \
    typedef struct Message_##symbol { \
        Message common; \
        a1 n1; a2 n2; a3 n3; a4 n4; a5 n5; a6 n6; a7 n7; \
        return_type result; \
    } Message_##symbol; \
    static return_type (*__dl_##symbol)(a1, a2, a3, a4, a5, a6, a7) FP_ATTRIB = NULL; \
    static void* handleMessage_##symbol (Message_##symbol* message) FP_ATTRIB; \
    static void* handleMessage_##symbol (Message_##symbol* message) \
    { \
        a1 n1 = message->n1; a2 n2 = message->n2; a3 n3 = message->n3; a4 n4 = message->n4; a5 n5 = message->n5; a6 n6 = message->n6; a7 n7 = message->n7; \
        return_type result; \
        result = __dl_##symbol(n1, n2, n3, n4, n5, n6, n7); \
        message->result = result; \
        return 0; \
    } \
    return_type symbol(a1 n1, a2 n2, a3 n3, a4 n4, a5 n5, a6 n6, a7 n7) \
    { \
        HYBRIS_DLSYSM(module, &__dl_##symbol, #symbol); \
        MessageHandler handler[1]; \
        Message_##symbol message[1]; \
        handler->handleMessage = (void *(*) (Message* ))handleMessage_##symbol; \
        message->n1 = n1; message->n2 = n2; message->n3 = n3; message->n4 = n4; message->n5 = n5; message->n6 = n6; message->n7 = n7; \
        (void)MessageQueue_push_message(get_call_queue(), (Message* )message, handler); \
        return message->result; \
    }


#define HYBRIS_IMPLEMENT_FUNCTION8(module, return_type, symbol, a1, a2, a3, a4, a5, a6, a7, a8) \
    typedef struct Message_##symbol { \
        Message common; \
        a1 n1; a2 n2; a3 n3; a4 n4; a5 n5; a6 n6; a7 n7; a8 n8; \
        return_type result; \
    } Message_##symbol; \
    static return_type (*__dl_##symbol)(a1, a2, a3, a4, a5, a6, a7, a8) FP_ATTRIB = NULL; \
    static void* handleMessage_##symbol (Message_##symbol* message) FP_ATTRIB; \
    static void* handleMessage_##symbol (Message_##symbol* message) \
    { \
        a1 n1 = message->n1; a2 n2 = message->n2; a3 n3 = message->n3; a4 n4 = message->n4; a5 n5 = message->n5; a6 n6 = message->n6; a7 n7 = message->n7; a8 n8 = message->n8; \
        return_type result; \
        result = __dl_##symbol(n1, n2, n3, n4, n5, n6, n7, n8); \
        message->result = result; \
        return 0; \
    } \
    return_type symbol(a1 n1, a2 n2, a3 n3, a4 n4, a5 n5, a6 n6, a7 n7, a8 n8) \
    { \
        HYBRIS_DLSYSM(module, &__dl_##symbol, #symbol); \
        MessageHandler handler[1]; \
        Message_##symbol message[1]; \
        handler->handleMessage = (void *(*) (Message* ))handleMessage_##symbol; \
        message->n1 = n1; message->n2 = n2; message->n3 = n3; message->n4 = n4; message->n5 = n5; message->n6 = n6; message->n7 = n7; message->n8 = n8; \
        (void)MessageQueue_push_message(get_call_queue(), (Message* )message, handler); \
        return message->result; \
    }


#define HYBRIS_IMPLEMENT_FUNCTION9(module, return_type, symbol, a1, a2, a3, a4, a5, a6, a7, a8, a9) \
    typedef struct Message_##symbol { \
        Message common; \
        a1 n1; a2 n2; a3 n3; a4 n4; a5 n5; a6 n6; a7 n7; a8 n8; a9 n9; \
        return_type result; \
    } Message_##symbol; \
    static return_type (*__dl_##symbol)(a1, a2, a3, a4, a5, a6, a7, a8, a9) FP_ATTRIB = NULL; \
    static void* handleMessage_##symbol (Message_##symbol* message) FP_ATTRIB; \
    static void* handleMessage_##symbol (Message_##symbol* message) \
    { \
        a1 n1 = message->n1; a2 n2 = message->n2; a3 n3 = message->n3; a4 n4 = message->n4; a5 n5 = message->n5; a6 n6 = message->n6; a7 n7 = message->n7; a8 n8 = message->n8; a9 n9 = message->n9; \
        return_type result; \
        result = __dl_##symbol(n1, n2, n3, n4, n5, n6, n7, n8, n9); \
        message->result = result; \
        return 0; \
    } \
    return_type symbol(a1 n1, a2 n2, a3 n3, a4 n4, a5 n5, a6 n6, a7 n7, a8 n8, a9 n9) \
    { \
        HYBRIS_DLSYSM(module, &__dl_##symbol, #symbol); \
        MessageHandler handler[1]; \
        Message_##symbol message[1]; \
        handler->handleMessage = (void *(*) (Message* ))handleMessage_##symbol; \
        message->n1 = n1; message->n2 = n2; message->n3 = n3; message->n4 = n4; message->n5 = n5; message->n6 = n6; message->n7 = n7; message->n8 = n8; message->n9 = n9; \
        (void)MessageQueue_push_message(get_call_queue(), (Message* )message, handler); \
        return message->result; \
    }


#define HYBRIS_IMPLEMENT_FUNCTION10(module, return_type, symbol, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) \
    typedef struct Message_##symbol { \
        Message common; \
        a1 n1; a2 n2; a3 n3; a4 n4; a5 n5; a6 n6; a7 n7; a8 n8; a9 n9; a10 n10; \
        return_type result; \
    } Message_##symbol; \
    static return_type (*__dl_##symbol)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) FP_ATTRIB = NULL; \
    static void* handleMessage_##symbol (Message_##symbol* message) FP_ATTRIB; \
    static void* handleMessage_##symbol (Message_##symbol* message) \
    { \
        a1 n1 = message->n1; a2 n2 = message->n2; a3 n3 = message->n3; a4 n4 = message->n4; a5 n5 = message->n5; a6 n6 = message->n6; a7 n7 = message->n7; a8 n8 = message->n8; a9 n9 = message->n9; a10 n10 = message->n10; \
        return_type result; \
        result = __dl_##symbol(n1, n2, n3, n4, n5, n6, n7, n8, n9, n10); \
        message->result = result; \
        return 0; \
    } \
    return_type symbol(a1 n1, a2 n2, a3 n3, a4 n4, a5 n5, a6 n6, a7 n7, a8 n8, a9 n9, a10 n10) \
    { \
        HYBRIS_DLSYSM(module, &__dl_##symbol, #symbol); \
        MessageHandler handler[1]; \
        Message_##symbol message[1]; \
        handler->handleMessage = (void *(*) (Message* ))handleMessage_##symbol; \
        message->n1 = n1; message->n2 = n2; message->n3 = n3; message->n4 = n4; message->n5 = n5; message->n6 = n6; message->n7 = n7; message->n8 = n8; message->n9 = n9; message->n10 = n10; \
        (void)MessageQueue_push_message(get_call_queue(), (Message* )message, handler); \
        return message->result; \
    }


#define HYBRIS_IMPLEMENT_FUNCTION11(module, return_type, symbol, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) \
    typedef struct Message_##symbol { \
        Message common; \
        a1 n1; a2 n2; a3 n3; a4 n4; a5 n5; a6 n6; a7 n7; a8 n8; a9 n9; a10 n10; a11 n11; \
        return_type result; \
    } Message_##symbol; \
    static return_type (*__dl_##symbol)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) FP_ATTRIB = NULL; \
    static void* handleMessage_##symbol (Message_##symbol* message) FP_ATTRIB; \
    static void* handleMessage_##symbol (Message_##symbol* message) \
    { \
        a1 n1 = message->n1; a2 n2 = message->n2; a3 n3 = message->n3; a4 n4 = message->n4; a5 n5 = message->n5; a6 n6 = message->n6; a7 n7 = message->n7; a8 n8 = message->n8; a9 n9 = message->n9; a10 n10 = message->n10; a11 n11 = message->n11; \
        return_type result; \
        result = __dl_##symbol(n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11); \
        message->result = result; \
        return 0; \
    } \
    return_type symbol(a1 n1, a2 n2, a3 n3, a4 n4, a5 n5, a6 n6, a7 n7, a8 n8, a9 n9, a10 n10, a11 n11) \
    { \
        HYBRIS_DLSYSM(module, &__dl_##symbol, #symbol); \
        MessageHandler handler[1]; \
        Message_##symbol message[1]; \
        handler->handleMessage = (void *(*) (Message* ))handleMessage_##symbol; \
        message->n1 = n1; message->n2 = n2; message->n3 = n3; message->n4 = n4; message->n5 = n5; message->n6 = n6; message->n7 = n7; message->n8 = n8; message->n9 = n9; message->n10 = n10; message->n11 = n11; \
        (void)MessageQueue_push_message(get_call_queue(), (Message* )message, handler); \
        return message->result; \
    }


#define HYBRIS_IMPLEMENT_FUNCTION12(module, return_type, symbol, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12) \
    typedef struct Message_##symbol { \
        Message common; \
        a1 n1; a2 n2; a3 n3; a4 n4; a5 n5; a6 n6; a7 n7; a8 n8; a9 n9; a10 n10; a11 n11; a12 n12; \
        return_type result; \
    } Message_##symbol; \
    static return_type (*__dl_##symbol)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12) FP_ATTRIB = NULL; \
    static void* handleMessage_##symbol (Message_##symbol* message) FP_ATTRIB; \
    static void* handleMessage_##symbol (Message_##symbol* message) \
    { \
        a1 n1 = message->n1; a2 n2 = message->n2; a3 n3 = message->n3; a4 n4 = message->n4; a5 n5 = message->n5; a6 n6 = message->n6; a7 n7 = message->n7; a8 n8 = message->n8; a9 n9 = message->n9; a10 n10 = message->n10; a11 n11 = message->n11; a12 n12 = message->n12; \
        return_type result; \
        result = __dl_##symbol(n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12); \
        message->result = result; \
        return 0; \
    } \
    return_type symbol(a1 n1, a2 n2, a3 n3, a4 n4, a5 n5, a6 n6, a7 n7, a8 n8, a9 n9, a10 n10, a11 n11, a12 n12) \
    { \
        HYBRIS_DLSYSM(module, &__dl_##symbol, #symbol); \
        MessageHandler handler[1]; \
        Message_##symbol message[1]; \
        handler->handleMessage = (void *(*) (Message* ))handleMessage_##symbol; \
        message->n1 = n1; message->n2 = n2; message->n3 = n3; message->n4 = n4; message->n5 = n5; message->n6 = n6; message->n7 = n7; message->n8 = n8; message->n9 = n9; message->n10 = n10; message->n11 = n11; message->n12 = n12; \
        (void)MessageQueue_push_message(get_call_queue(), (Message* )message, handler); \
        return message->result; \
    }


#define HYBRIS_IMPLEMENT_FUNCTION13(module, return_type, symbol, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13) \
    typedef struct Message_##symbol { \
        Message common; \
        a1 n1; a2 n2; a3 n3; a4 n4; a5 n5; a6 n6; a7 n7; a8 n8; a9 n9; a10 n10; a11 n11; a12 n12; a13 n13; \
        return_type result; \
    } Message_##symbol; \
    static return_type (*__dl_##symbol)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13) FP_ATTRIB = NULL; \
    static void* handleMessage_##symbol (Message_##symbol* message) FP_ATTRIB; \
    static void* handleMessage_##symbol (Message_##symbol* message) \
    { \
        a1 n1 = message->n1; a2 n2 = message->n2; a3 n3 = message->n3; a4 n4 = message->n4; a5 n5 = message->n5; a6 n6 = message->n6; a7 n7 = message->n7; a8 n8 = message->n8; a9 n9 = message->n9; a10 n10 = message->n10; a11 n11 = message->n11; a12 n12 = message->n12; a13 n13 = message->n13; \
        return_type result; \
        result = __dl_##symbol(n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13); \
        message->result = result; \
        return 0; \
    } \
    return_type symbol(a1 n1, a2 n2, a3 n3, a4 n4, a5 n5, a6 n6, a7 n7, a8 n8, a9 n9, a10 n10, a11 n11, a12 n12, a13 n13) \
    { \
        HYBRIS_DLSYSM(module, &__dl_##symbol, #symbol); \
        MessageHandler handler[1]; \
        Message_##symbol message[1]; \
        handler->handleMessage = (void *(*) (Message* ))handleMessage_##symbol; \
        message->n1 = n1; message->n2 = n2; message->n3 = n3; message->n4 = n4; message->n5 = n5; message->n6 = n6; message->n7 = n7; message->n8 = n8; message->n9 = n9; message->n10 = n10; message->n11 = n11; message->n12 = n12; message->n13 = n13; \
        (void)MessageQueue_push_message(get_call_queue(), (Message* )message, handler); \
        return message->result; \
    }


#define HYBRIS_IMPLEMENT_FUNCTION14(module, return_type, symbol, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) \
    typedef struct Message_##symbol { \
        Message common; \
        a1 n1; a2 n2; a3 n3; a4 n4; a5 n5; a6 n6; a7 n7; a8 n8; a9 n9; a10 n10; a11 n11; a12 n12; a13 n13; a14 n14; \
        return_type result; \
    } Message_##symbol; \
    static return_type (*__dl_##symbol)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) FP_ATTRIB = NULL; \
    static void* handleMessage_##symbol (Message_##symbol* message) FP_ATTRIB; \
    static void* handleMessage_##symbol (Message_##symbol* message) \
    { \
        a1 n1 = message->n1; a2 n2 = message->n2; a3 n3 = message->n3; a4 n4 = message->n4; a5 n5 = message->n5; a6 n6 = message->n6; a7 n7 = message->n7; a8 n8 = message->n8; a9 n9 = message->n9; a10 n10 = message->n10; a11 n11 = message->n11; a12 n12 = message->n12; a13 n13 = message->n13; a14 n14 = message->n14; \
        return_type result; \
        result = __dl_##symbol(n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14); \
        message->result = result; \
        return 0; \
    } \
    return_type symbol(a1 n1, a2 n2, a3 n3, a4 n4, a5 n5, a6 n6, a7 n7, a8 n8, a9 n9, a10 n10, a11 n11, a12 n12, a13 n13, a14 n14) \
    { \
        HYBRIS_DLSYSM(module, &__dl_##symbol, #symbol); \
        MessageHandler handler[1]; \
        Message_##symbol message[1]; \
        handler->handleMessage = (void *(*) (Message* ))handleMessage_##symbol; \
        message->n1 = n1; message->n2 = n2; message->n3 = n3; message->n4 = n4; message->n5 = n5; message->n6 = n6; message->n7 = n7; message->n8 = n8; message->n9 = n9; message->n10 = n10; message->n11 = n11; message->n12 = n12; message->n13 = n13; message->n14 = n14; \
        (void)MessageQueue_push_message(get_call_queue(), (Message* )message, handler); \
        return message->result; \
    }


#define HYBRIS_IMPLEMENT_FUNCTION15(module, return_type, symbol, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) \
    typedef struct Message_##symbol { \
        Message common; \
        a1 n1; a2 n2; a3 n3; a4 n4; a5 n5; a6 n6; a7 n7; a8 n8; a9 n9; a10 n10; a11 n11; a12 n12; a13 n13; a14 n14; a15 n15; \
        return_type result; \
    } Message_##symbol; \
    static return_type (*__dl_##symbol)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) FP_ATTRIB = NULL; \
    static void* handleMessage_##symbol (Message_##symbol* message) FP_ATTRIB; \
    static void* handleMessage_##symbol (Message_##symbol* message) \
    { \
        a1 n1 = message->n1; a2 n2 = message->n2; a3 n3 = message->n3; a4 n4 = message->n4; a5 n5 = message->n5; a6 n6 = message->n6; a7 n7 = message->n7; a8 n8 = message->n8; a9 n9 = message->n9; a10 n10 = message->n10; a11 n11 = message->n11; a12 n12 = message->n12; a13 n13 = message->n13; a14 n14 = message->n14; a15 n15 = message->n15; \
        return_type result; \
        result = __dl_##symbol(n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15); \
        message->result = result; \
        return 0; \
    } \
    return_type symbol(a1 n1, a2 n2, a3 n3, a4 n4, a5 n5, a6 n6, a7 n7, a8 n8, a9 n9, a10 n10, a11 n11, a12 n12, a13 n13, a14 n14, a15 n15) \
    { \
        HYBRIS_DLSYSM(module, &__dl_##symbol, #symbol); \
        MessageHandler handler[1]; \
        Message_##symbol message[1]; \
        handler->handleMessage = (void *(*) (Message* ))handleMessage_##symbol; \
        message->n1 = n1; message->n2 = n2; message->n3 = n3; message->n4 = n4; message->n5 = n5; message->n6 = n6; message->n7 = n7; message->n8 = n8; message->n9 = n9; message->n10 = n10; message->n11 = n11; message->n12 = n12; message->n13 = n13; message->n14 = n14; message->n15 = n15; \
        (void)MessageQueue_push_message(get_call_queue(), (Message* )message, handler); \
        return message->result; \
    }


#define HYBRIS_IMPLEMENT_FUNCTION16(module, return_type, symbol, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16) \
    typedef struct Message_##symbol { \
        Message common; \
        a1 n1; a2 n2; a3 n3; a4 n4; a5 n5; a6 n6; a7 n7; a8 n8; a9 n9; a10 n10; a11 n11; a12 n12; a13 n13; a14 n14; a15 n15; a16 n16; \
        return_type result; \
    } Message_##symbol; \
    static return_type (*__dl_##symbol)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16) FP_ATTRIB = NULL; \
    static void* handleMessage_##symbol (Message_##symbol* message) FP_ATTRIB; \
    static void* handleMessage_##symbol (Message_##symbol* message) \
    { \
        a1 n1 = message->n1; a2 n2 = message->n2; a3 n3 = message->n3; a4 n4 = message->n4; a5 n5 = message->n5; a6 n6 = message->n6; a7 n7 = message->n7; a8 n8 = message->n8; a9 n9 = message->n9; a10 n10 = message->n10; a11 n11 = message->n11; a12 n12 = message->n12; a13 n13 = message->n13; a14 n14 = message->n14; a15 n15 = message->n15; a16 n16 = message->n16; \
        return_type result; \
        result = __dl_##symbol(n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16); \
        message->result = result; \
        return 0; \
    } \
    return_type symbol(a1 n1, a2 n2, a3 n3, a4 n4, a5 n5, a6 n6, a7 n7, a8 n8, a9 n9, a10 n10, a11 n11, a12 n12, a13 n13, a14 n14, a15 n15, a16 n16) \
    { \
        HYBRIS_DLSYSM(module, &__dl_##symbol, #symbol); \
        MessageHandler handler[1]; \
        Message_##symbol message[1]; \
        handler->handleMessage = (void *(*) (Message* ))handleMessage_##symbol; \
        message->n1 = n1; message->n2 = n2; message->n3 = n3; message->n4 = n4; message->n5 = n5; message->n6 = n6; message->n7 = n7; message->n8 = n8; message->n9 = n9; message->n10 = n10; message->n11 = n11; message->n12 = n12; message->n13 = n13; message->n14 = n14; message->n15 = n15; message->n16 = n16; \
        (void)MessageQueue_push_message(get_call_queue(), (Message* )message, handler); \
        return message->result; \
    }


#define HYBRIS_IMPLEMENT_FUNCTION17(module, return_type, symbol, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17) \
    typedef struct Message_##symbol { \
        Message common; \
        a1 n1; a2 n2; a3 n3; a4 n4; a5 n5; a6 n6; a7 n7; a8 n8; a9 n9; a10 n10; a11 n11; a12 n12; a13 n13; a14 n14; a15 n15; a16 n16; a17 n17; \
        return_type result; \
    } Message_##symbol; \
    static return_type (*__dl_##symbol)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17) FP_ATTRIB = NULL; \
    static void* handleMessage_##symbol (Message_##symbol* message) FP_ATTRIB; \
    static void* handleMessage_##symbol (Message_##symbol* message) \
    { \
        a1 n1 = message->n1; a2 n2 = message->n2; a3 n3 = message->n3; a4 n4 = message->n4; a5 n5 = message->n5; a6 n6 = message->n6; a7 n7 = message->n7; a8 n8 = message->n8; a9 n9 = message->n9; a10 n10 = message->n10; a11 n11 = message->n11; a12 n12 = message->n12; a13 n13 = message->n13; a14 n14 = message->n14; a15 n15 = message->n15; a16 n16 = message->n16; a17 n17 = message->n17; \
        return_type result; \
        result = __dl_##symbol(n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17); \
        message->result = result; \
        return 0; \
    } \
    return_type symbol(a1 n1, a2 n2, a3 n3, a4 n4, a5 n5, a6 n6, a7 n7, a8 n8, a9 n9, a10 n10, a11 n11, a12 n12, a13 n13, a14 n14, a15 n15, a16 n16, a17 n17) \
    { \
        HYBRIS_DLSYSM(module, &__dl_##symbol, #symbol); \
        MessageHandler handler[1]; \
        Message_##symbol message[1]; \
        handler->handleMessage = (void *(*) (Message* ))handleMessage_##symbol; \
        message->n1 = n1; message->n2 = n2; message->n3 = n3; message->n4 = n4; message->n5 = n5; message->n6 = n6; message->n7 = n7; message->n8 = n8; message->n9 = n9; message->n10 = n10; message->n11 = n11; message->n12 = n12; message->n13 = n13; message->n14 = n14; message->n15 = n15; message->n16 = n16; message->n17 = n17; \
        (void)MessageQueue_push_message(get_call_queue(), (Message* )message, handler); \
        return message->result; \
    }


#define HYBRIS_IMPLEMENT_FUNCTION18(module, return_type, symbol, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18) \
    typedef struct Message_##symbol { \
        Message common; \
        a1 n1; a2 n2; a3 n3; a4 n4; a5 n5; a6 n6; a7 n7; a8 n8; a9 n9; a10 n10; a11 n11; a12 n12; a13 n13; a14 n14; a15 n15; a16 n16; a17 n17; a18 n18; \
        return_type result; \
    } Message_##symbol; \
    static return_type (*__dl_##symbol)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18) FP_ATTRIB = NULL; \
    static void* handleMessage_##symbol (Message_##symbol* message) FP_ATTRIB; \
    static void* handleMessage_##symbol (Message_##symbol* message) \
    { \
        a1 n1 = message->n1; a2 n2 = message->n2; a3 n3 = message->n3; a4 n4 = message->n4; a5 n5 = message->n5; a6 n6 = message->n6; a7 n7 = message->n7; a8 n8 = message->n8; a9 n9 = message->n9; a10 n10 = message->n10; a11 n11 = message->n11; a12 n12 = message->n12; a13 n13 = message->n13; a14 n14 = message->n14; a15 n15 = message->n15; a16 n16 = message->n16; a17 n17 = message->n17; a18 n18 = message->n18; \
        return_type result; \
        result = __dl_##symbol(n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n18); \
        message->result = result; \
        return 0; \
    } \
    return_type symbol(a1 n1, a2 n2, a3 n3, a4 n4, a5 n5, a6 n6, a7 n7, a8 n8, a9 n9, a10 n10, a11 n11, a12 n12, a13 n13, a14 n14, a15 n15, a16 n16, a17 n17, a18 n18) \
    { \
        HYBRIS_DLSYSM(module, &__dl_##symbol, #symbol); \
        MessageHandler handler[1]; \
        Message_##symbol message[1]; \
        handler->handleMessage = (void *(*) (Message* ))handleMessage_##symbol; \
        message->n1 = n1; message->n2 = n2; message->n3 = n3; message->n4 = n4; message->n5 = n5; message->n6 = n6; message->n7 = n7; message->n8 = n8; message->n9 = n9; message->n10 = n10; message->n11 = n11; message->n12 = n12; message->n13 = n13; message->n14 = n14; message->n15 = n15; message->n16 = n16; message->n17 = n17; message->n18 = n18; \
        (void)MessageQueue_push_message(get_call_queue(), (Message* )message, handler); \
        return message->result; \
    }


#define HYBRIS_IMPLEMENT_FUNCTION19(module, return_type, symbol, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19) \
    typedef struct Message_##symbol { \
        Message common; \
        a1 n1; a2 n2; a3 n3; a4 n4; a5 n5; a6 n6; a7 n7; a8 n8; a9 n9; a10 n10; a11 n11; a12 n12; a13 n13; a14 n14; a15 n15; a16 n16; a17 n17; a18 n18; a19 n19; \
        return_type result; \
    } Message_##symbol; \
    static return_type (*__dl_##symbol)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19) FP_ATTRIB = NULL; \
    static void* handleMessage_##symbol (Message_##symbol* message) FP_ATTRIB; \
    static void* handleMessage_##symbol (Message_##symbol* message) \
    { \
        a1 n1 = message->n1; a2 n2 = message->n2; a3 n3 = message->n3; a4 n4 = message->n4; a5 n5 = message->n5; a6 n6 = message->n6; a7 n7 = message->n7; a8 n8 = message->n8; a9 n9 = message->n9; a10 n10 = message->n10; a11 n11 = message->n11; a12 n12 = message->n12; a13 n13 = message->n13; a14 n14 = message->n14; a15 n15 = message->n15; a16 n16 = message->n16; a17 n17 = message->n17; a18 n18 = message->n18; a19 n19 = message->n19; \
        return_type result; \
        result = __dl_##symbol(n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n18, n19); \
        message->result = result; \
        return 0; \
    } \
    return_type symbol(a1 n1, a2 n2, a3 n3, a4 n4, a5 n5, a6 n6, a7 n7, a8 n8, a9 n9, a10 n10, a11 n11, a12 n12, a13 n13, a14 n14, a15 n15, a16 n16, a17 n17, a18 n18, a19 n19) \
    { \
        HYBRIS_DLSYSM(module, &__dl_##symbol, #symbol); \
        MessageHandler handler[1]; \
        Message_##symbol message[1]; \
        handler->handleMessage = (void *(*) (Message* ))handleMessage_##symbol; \
        message->n1 = n1; message->n2 = n2; message->n3 = n3; message->n4 = n4; message->n5 = n5; message->n6 = n6; message->n7 = n7; message->n8 = n8; message->n9 = n9; message->n10 = n10; message->n11 = n11; message->n12 = n12; message->n13 = n13; message->n14 = n14; message->n15 = n15; message->n16 = n16; message->n17 = n17; message->n18 = n18; message->n19 = n19; \
        (void)MessageQueue_push_message(get_call_queue(), (Message* )message, handler); \
        return message->result; \
    }


#define HYBRIS_IMPLEMENT_VOID_FUNCTION0(module, symbol) \
    typedef struct Message_##symbol { \
        Message common; \
        ; \
    } Message_##symbol; \
    static void (*__dl_##symbol)() FP_ATTRIB = NULL; \
    static void* handleMessage_##symbol (Message_##symbol* message) FP_ATTRIB; \
    static void* handleMessage_##symbol (Message_##symbol* message) \
    { \
        ; \
        __dl_##symbol(); \
        return 0; \
    } \
    void symbol() \
    { \
        HYBRIS_DLSYSM(module, &__dl_##symbol, #symbol); \
        MessageHandler handler[1]; \
        Message_##symbol message[1]; \
        handler->handleMessage = (void *(*) (Message* ))handleMessage_##symbol; \
        ; \
        (void)MessageQueue_push_message(get_call_queue(), (Message* )message, handler); \
    }


#define HYBRIS_IMPLEMENT_VOID_FUNCTION1(module, symbol, a1) \
    typedef struct Message_##symbol { \
        Message common; \
        a1 n1; \
    } Message_##symbol; \
    static void (*__dl_##symbol)(a1) FP_ATTRIB = NULL; \
    static void* handleMessage_##symbol (Message_##symbol* message) FP_ATTRIB; \
    static void* handleMessage_##symbol (Message_##symbol* message) \
    { \
        a1 n1 = message->n1; \
        __dl_##symbol(n1); \
        return 0; \
    } \
    void symbol(a1 n1) \
    { \
        HYBRIS_DLSYSM(module, &__dl_##symbol, #symbol); \
        MessageHandler handler[1]; \
        Message_##symbol message[1]; \
        handler->handleMessage = (void *(*) (Message* ))handleMessage_##symbol; \
        message->n1 = n1; \
        (void)MessageQueue_push_message(get_call_queue(), (Message* )message, handler); \
    }


#define HYBRIS_IMPLEMENT_VOID_FUNCTION2(module, symbol, a1, a2) \
    typedef struct Message_##symbol { \
        Message common; \
        a1 n1; a2 n2; \
    } Message_##symbol; \
    static void (*__dl_##symbol)(a1, a2) FP_ATTRIB = NULL; \
    static void* handleMessage_##symbol (Message_##symbol* message) FP_ATTRIB; \
    static void* handleMessage_##symbol (Message_##symbol* message) \
    { \
        a1 n1 = message->n1; a2 n2 = message->n2; \
        __dl_##symbol(n1, n2); \
        return 0; \
    } \
    void symbol(a1 n1, a2 n2) \
    { \
        HYBRIS_DLSYSM(module, &__dl_##symbol, #symbol); \
        MessageHandler handler[1]; \
        Message_##symbol message[1]; \
        handler->handleMessage = (void *(*) (Message* ))handleMessage_##symbol; \
        message->n1 = n1; message->n2 = n2; \
        (void)MessageQueue_push_message(get_call_queue(), (Message* )message, handler); \
    }


#define HYBRIS_IMPLEMENT_VOID_FUNCTION3(module, symbol, a1, a2, a3) \
    typedef struct Message_##symbol { \
        Message common; \
        a1 n1; a2 n2; a3 n3; \
    } Message_##symbol; \
    static void (*__dl_##symbol)(a1, a2, a3) FP_ATTRIB = NULL; \
    static void* handleMessage_##symbol (Message_##symbol* message) FP_ATTRIB; \
    static void* handleMessage_##symbol (Message_##symbol* message) \
    { \
        a1 n1 = message->n1; a2 n2 = message->n2; a3 n3 = message->n3; \
        __dl_##symbol(n1, n2, n3); \
        return 0; \
    } \
    void symbol(a1 n1, a2 n2, a3 n3) \
    { \
        HYBRIS_DLSYSM(module, &__dl_##symbol, #symbol); \
        MessageHandler handler[1]; \
        Message_##symbol message[1]; \
        handler->handleMessage = (void *(*) (Message* ))handleMessage_##symbol; \
        message->n1 = n1; message->n2 = n2; message->n3 = n3; \
        (void)MessageQueue_push_message(get_call_queue(), (Message* )message, handler); \
    }


#define HYBRIS_IMPLEMENT_VOID_FUNCTION4(module, symbol, a1, a2, a3, a4) \
    typedef struct Message_##symbol { \
        Message common; \
        a1 n1; a2 n2; a3 n3; a4 n4; \
    } Message_##symbol; \
    static void (*__dl_##symbol)(a1, a2, a3, a4) FP_ATTRIB = NULL; \
    static void* handleMessage_##symbol (Message_##symbol* message) FP_ATTRIB; \
    static void* handleMessage_##symbol (Message_##symbol* message) \
    { \
        a1 n1 = message->n1; a2 n2 = message->n2; a3 n3 = message->n3; a4 n4 = message->n4; \
        __dl_##symbol(n1, n2, n3, n4); \
        return 0; \
    } \
    void symbol(a1 n1, a2 n2, a3 n3, a4 n4) \
    { \
        HYBRIS_DLSYSM(module, &__dl_##symbol, #symbol); \
        MessageHandler handler[1]; \
        Message_##symbol message[1]; \
        handler->handleMessage = (void *(*) (Message* ))handleMessage_##symbol; \
        message->n1 = n1; message->n2 = n2; message->n3 = n3; message->n4 = n4; \
        (void)MessageQueue_push_message(get_call_queue(), (Message* )message, handler); \
    }


#define HYBRIS_IMPLEMENT_VOID_FUNCTION5(module, symbol, a1, a2, a3, a4, a5) \
    typedef struct Message_##symbol { \
        Message common; \
        a1 n1; a2 n2; a3 n3; a4 n4; a5 n5; \
    } Message_##symbol; \
    static void (*__dl_##symbol)(a1, a2, a3, a4, a5) FP_ATTRIB = NULL; \
    static void* handleMessage_##symbol (Message_##symbol* message) FP_ATTRIB; \
    static void* handleMessage_##symbol (Message_##symbol* message) \
    { \
        a1 n1 = message->n1; a2 n2 = message->n2; a3 n3 = message->n3; a4 n4 = message->n4; a5 n5 = message->n5; \
        __dl_##symbol(n1, n2, n3, n4, n5); \
        return 0; \
    } \
    void symbol(a1 n1, a2 n2, a3 n3, a4 n4, a5 n5) \
    { \
        HYBRIS_DLSYSM(module, &__dl_##symbol, #symbol); \
        MessageHandler handler[1]; \
        Message_##symbol message[1]; \
        handler->handleMessage = (void *(*) (Message* ))handleMessage_##symbol; \
        message->n1 = n1; message->n2 = n2; message->n3 = n3; message->n4 = n4; message->n5 = n5; \
        (void)MessageQueue_push_message(get_call_queue(), (Message* )message, handler); \
    }


#define HYBRIS_IMPLEMENT_VOID_FUNCTION6(module, symbol, a1, a2, a3, a4, a5, a6) \
    typedef struct Message_##symbol { \
        Message common; \
        a1 n1; a2 n2; a3 n3; a4 n4; a5 n5; a6 n6; \
    } Message_##symbol; \
    static void (*__dl_##symbol)(a1, a2, a3, a4, a5, a6) FP_ATTRIB = NULL; \
    static void* handleMessage_##symbol (Message_##symbol* message) FP_ATTRIB; \
    static void* handleMessage_##symbol (Message_##symbol* message) \
    { \
        a1 n1 = message->n1; a2 n2 = message->n2; a3 n3 = message->n3; a4 n4 = message->n4; a5 n5 = message->n5; a6 n6 = message->n6; \
        __dl_##symbol(n1, n2, n3, n4, n5, n6); \
        return 0; \
    } \
    void symbol(a1 n1, a2 n2, a3 n3, a4 n4, a5 n5, a6 n6) \
    { \
        HYBRIS_DLSYSM(module, &__dl_##symbol, #symbol); \
        MessageHandler handler[1]; \
        Message_##symbol message[1]; \
        handler->handleMessage = (void *(*) (Message* ))handleMessage_##symbol; \
        message->n1 = n1; message->n2 = n2; message->n3 = n3; message->n4 = n4; message->n5 = n5; message->n6 = n6; \
        (void)MessageQueue_push_message(get_call_queue(), (Message* )message, handler); \
    }


#define HYBRIS_IMPLEMENT_VOID_FUNCTION7(module, symbol, a1, a2, a3, a4, a5, a6, a7) \
    typedef struct Message_##symbol { \
        Message common; \
        a1 n1; a2 n2; a3 n3; a4 n4; a5 n5; a6 n6; a7 n7; \
    } Message_##symbol; \
    static void (*__dl_##symbol)(a1, a2, a3, a4, a5, a6, a7) FP_ATTRIB = NULL; \
    static void* handleMessage_##symbol (Message_##symbol* message) FP_ATTRIB; \
    static void* handleMessage_##symbol (Message_##symbol* message) \
    { \
        a1 n1 = message->n1; a2 n2 = message->n2; a3 n3 = message->n3; a4 n4 = message->n4; a5 n5 = message->n5; a6 n6 = message->n6; a7 n7 = message->n7; \
        __dl_##symbol(n1, n2, n3, n4, n5, n6, n7); \
        return 0; \
    } \
    void symbol(a1 n1, a2 n2, a3 n3, a4 n4, a5 n5, a6 n6, a7 n7) \
    { \
        HYBRIS_DLSYSM(module, &__dl_##symbol, #symbol); \
        MessageHandler handler[1]; \
        Message_##symbol message[1]; \
        handler->handleMessage = (void *(*) (Message* ))handleMessage_##symbol; \
        message->n1 = n1; message->n2 = n2; message->n3 = n3; message->n4 = n4; message->n5 = n5; message->n6 = n6; message->n7 = n7; \
        (void)MessageQueue_push_message(get_call_queue(), (Message* )message, handler); \
    }


#define HYBRIS_IMPLEMENT_VOID_FUNCTION8(module, symbol, a1, a2, a3, a4, a5, a6, a7, a8) \
    typedef struct Message_##symbol { \
        Message common; \
        a1 n1; a2 n2; a3 n3; a4 n4; a5 n5; a6 n6; a7 n7; a8 n8; \
    } Message_##symbol; \
    static void (*__dl_##symbol)(a1, a2, a3, a4, a5, a6, a7, a8) FP_ATTRIB = NULL; \
    static void* handleMessage_##symbol (Message_##symbol* message) FP_ATTRIB; \
    static void* handleMessage_##symbol (Message_##symbol* message) \
    { \
        a1 n1 = message->n1; a2 n2 = message->n2; a3 n3 = message->n3; a4 n4 = message->n4; a5 n5 = message->n5; a6 n6 = message->n6; a7 n7 = message->n7; a8 n8 = message->n8; \
        __dl_##symbol(n1, n2, n3, n4, n5, n6, n7, n8); \
        return 0; \
    } \
    void symbol(a1 n1, a2 n2, a3 n3, a4 n4, a5 n5, a6 n6, a7 n7, a8 n8) \
    { \
        HYBRIS_DLSYSM(module, &__dl_##symbol, #symbol); \
        MessageHandler handler[1]; \
        Message_##symbol message[1]; \
        handler->handleMessage = (void *(*) (Message* ))handleMessage_##symbol; \
        message->n1 = n1; message->n2 = n2; message->n3 = n3; message->n4 = n4; message->n5 = n5; message->n6 = n6; message->n7 = n7; message->n8 = n8; \
        (void)MessageQueue_push_message(get_call_queue(), (Message* )message, handler); \
    }


#define HYBRIS_IMPLEMENT_VOID_FUNCTION9(module, symbol, a1, a2, a3, a4, a5, a6, a7, a8, a9) \
    typedef struct Message_##symbol { \
        Message common; \
        a1 n1; a2 n2; a3 n3; a4 n4; a5 n5; a6 n6; a7 n7; a8 n8; a9 n9; \
    } Message_##symbol; \
    static void (*__dl_##symbol)(a1, a2, a3, a4, a5, a6, a7, a8, a9) FP_ATTRIB = NULL; \
    static void* handleMessage_##symbol (Message_##symbol* message) FP_ATTRIB; \
    static void* handleMessage_##symbol (Message_##symbol* message) \
    { \
        a1 n1 = message->n1; a2 n2 = message->n2; a3 n3 = message->n3; a4 n4 = message->n4; a5 n5 = message->n5; a6 n6 = message->n6; a7 n7 = message->n7; a8 n8 = message->n8; a9 n9 = message->n9; \
        __dl_##symbol(n1, n2, n3, n4, n5, n6, n7, n8, n9); \
        return 0; \
    } \
    void symbol(a1 n1, a2 n2, a3 n3, a4 n4, a5 n5, a6 n6, a7 n7, a8 n8, a9 n9) \
    { \
        HYBRIS_DLSYSM(module, &__dl_##symbol, #symbol); \
        MessageHandler handler[1]; \
        Message_##symbol message[1]; \
        handler->handleMessage = (void *(*) (Message* ))handleMessage_##symbol; \
        message->n1 = n1; message->n2 = n2; message->n3 = n3; message->n4 = n4; message->n5 = n5; message->n6 = n6; message->n7 = n7; message->n8 = n8; message->n9 = n9; \
        (void)MessageQueue_push_message(get_call_queue(), (Message* )message, handler); \
    }


#define HYBRIS_IMPLEMENT_VOID_FUNCTION10(module, symbol, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) \
    typedef struct Message_##symbol { \
        Message common; \
        a1 n1; a2 n2; a3 n3; a4 n4; a5 n5; a6 n6; a7 n7; a8 n8; a9 n9; a10 n10; \
    } Message_##symbol; \
    static void (*__dl_##symbol)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) FP_ATTRIB = NULL; \
    static void* handleMessage_##symbol (Message_##symbol* message) FP_ATTRIB; \
    static void* handleMessage_##symbol (Message_##symbol* message) \
    { \
        a1 n1 = message->n1; a2 n2 = message->n2; a3 n3 = message->n3; a4 n4 = message->n4; a5 n5 = message->n5; a6 n6 = message->n6; a7 n7 = message->n7; a8 n8 = message->n8; a9 n9 = message->n9; a10 n10 = message->n10; \
        __dl_##symbol(n1, n2, n3, n4, n5, n6, n7, n8, n9, n10); \
        return 0; \
    } \
    void symbol(a1 n1, a2 n2, a3 n3, a4 n4, a5 n5, a6 n6, a7 n7, a8 n8, a9 n9, a10 n10) \
    { \
        HYBRIS_DLSYSM(module, &__dl_##symbol, #symbol); \
        MessageHandler handler[1]; \
        Message_##symbol message[1]; \
        handler->handleMessage = (void *(*) (Message* ))handleMessage_##symbol; \
        message->n1 = n1; message->n2 = n2; message->n3 = n3; message->n4 = n4; message->n5 = n5; message->n6 = n6; message->n7 = n7; message->n8 = n8; message->n9 = n9; message->n10 = n10; \
        (void)MessageQueue_push_message(get_call_queue(), (Message* )message, handler); \
    }


#define HYBRIS_IMPLEMENT_VOID_FUNCTION11(module, symbol, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) \
    typedef struct Message_##symbol { \
        Message common; \
        a1 n1; a2 n2; a3 n3; a4 n4; a5 n5; a6 n6; a7 n7; a8 n8; a9 n9; a10 n10; a11 n11; \
    } Message_##symbol; \
    static void (*__dl_##symbol)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) FP_ATTRIB = NULL; \
    static void* handleMessage_##symbol (Message_##symbol* message) FP_ATTRIB; \
    static void* handleMessage_##symbol (Message_##symbol* message) \
    { \
        a1 n1 = message->n1; a2 n2 = message->n2; a3 n3 = message->n3; a4 n4 = message->n4; a5 n5 = message->n5; a6 n6 = message->n6; a7 n7 = message->n7; a8 n8 = message->n8; a9 n9 = message->n9; a10 n10 = message->n10; a11 n11 = message->n11; \
        __dl_##symbol(n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11); \
        return 0; \
    } \
    void symbol(a1 n1, a2 n2, a3 n3, a4 n4, a5 n5, a6 n6, a7 n7, a8 n8, a9 n9, a10 n10, a11 n11) \
    { \
        HYBRIS_DLSYSM(module, &__dl_##symbol, #symbol); \
        MessageHandler handler[1]; \
        Message_##symbol message[1]; \
        handler->handleMessage = (void *(*) (Message* ))handleMessage_##symbol; \
        message->n1 = n1; message->n2 = n2; message->n3 = n3; message->n4 = n4; message->n5 = n5; message->n6 = n6; message->n7 = n7; message->n8 = n8; message->n9 = n9; message->n10 = n10; message->n11 = n11; \
        (void)MessageQueue_push_message(get_call_queue(), (Message* )message, handler); \
    }


#define HYBRIS_IMPLEMENT_VOID_FUNCTION12(module, symbol, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12) \
    typedef struct Message_##symbol { \
        Message common; \
        a1 n1; a2 n2; a3 n3; a4 n4; a5 n5; a6 n6; a7 n7; a8 n8; a9 n9; a10 n10; a11 n11; a12 n12; \
    } Message_##symbol; \
    static void (*__dl_##symbol)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12) FP_ATTRIB = NULL; \
    static void* handleMessage_##symbol (Message_##symbol* message) FP_ATTRIB; \
    static void* handleMessage_##symbol (Message_##symbol* message) \
    { \
        a1 n1 = message->n1; a2 n2 = message->n2; a3 n3 = message->n3; a4 n4 = message->n4; a5 n5 = message->n5; a6 n6 = message->n6; a7 n7 = message->n7; a8 n8 = message->n8; a9 n9 = message->n9; a10 n10 = message->n10; a11 n11 = message->n11; a12 n12 = message->n12; \
        __dl_##symbol(n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12); \
        return 0; \
    } \
    void symbol(a1 n1, a2 n2, a3 n3, a4 n4, a5 n5, a6 n6, a7 n7, a8 n8, a9 n9, a10 n10, a11 n11, a12 n12) \
    { \
        HYBRIS_DLSYSM(module, &__dl_##symbol, #symbol); \
        MessageHandler handler[1]; \
        Message_##symbol message[1]; \
        handler->handleMessage = (void *(*) (Message* ))handleMessage_##symbol; \
        message->n1 = n1; message->n2 = n2; message->n3 = n3; message->n4 = n4; message->n5 = n5; message->n6 = n6; message->n7 = n7; message->n8 = n8; message->n9 = n9; message->n10 = n10; message->n11 = n11; message->n12 = n12; \
        (void)MessageQueue_push_message(get_call_queue(), (Message* )message, handler); \
    }


#define HYBRIS_IMPLEMENT_VOID_FUNCTION13(module, symbol, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13) \
    typedef struct Message_##symbol { \
        Message common; \
        a1 n1; a2 n2; a3 n3; a4 n4; a5 n5; a6 n6; a7 n7; a8 n8; a9 n9; a10 n10; a11 n11; a12 n12; a13 n13; \
    } Message_##symbol; \
    static void (*__dl_##symbol)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13) FP_ATTRIB = NULL; \
    static void* handleMessage_##symbol (Message_##symbol* message) FP_ATTRIB; \
    static void* handleMessage_##symbol (Message_##symbol* message) \
    { \
        a1 n1 = message->n1; a2 n2 = message->n2; a3 n3 = message->n3; a4 n4 = message->n4; a5 n5 = message->n5; a6 n6 = message->n6; a7 n7 = message->n7; a8 n8 = message->n8; a9 n9 = message->n9; a10 n10 = message->n10; a11 n11 = message->n11; a12 n12 = message->n12; a13 n13 = message->n13; \
        __dl_##symbol(n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13); \
        return 0; \
    } \
    void symbol(a1 n1, a2 n2, a3 n3, a4 n4, a5 n5, a6 n6, a7 n7, a8 n8, a9 n9, a10 n10, a11 n11, a12 n12, a13 n13) \
    { \
        HYBRIS_DLSYSM(module, &__dl_##symbol, #symbol); \
        MessageHandler handler[1]; \
        Message_##symbol message[1]; \
        handler->handleMessage = (void *(*) (Message* ))handleMessage_##symbol; \
        message->n1 = n1; message->n2 = n2; message->n3 = n3; message->n4 = n4; message->n5 = n5; message->n6 = n6; message->n7 = n7; message->n8 = n8; message->n9 = n9; message->n10 = n10; message->n11 = n11; message->n12 = n12; message->n13 = n13; \
        (void)MessageQueue_push_message(get_call_queue(), (Message* )message, handler); \
    }


#define HYBRIS_IMPLEMENT_VOID_FUNCTION14(module, symbol, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) \
    typedef struct Message_##symbol { \
        Message common; \
        a1 n1; a2 n2; a3 n3; a4 n4; a5 n5; a6 n6; a7 n7; a8 n8; a9 n9; a10 n10; a11 n11; a12 n12; a13 n13; a14 n14; \
    } Message_##symbol; \
    static void (*__dl_##symbol)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) FP_ATTRIB = NULL; \
    static void* handleMessage_##symbol (Message_##symbol* message) FP_ATTRIB; \
    static void* handleMessage_##symbol (Message_##symbol* message) \
    { \
        a1 n1 = message->n1; a2 n2 = message->n2; a3 n3 = message->n3; a4 n4 = message->n4; a5 n5 = message->n5; a6 n6 = message->n6; a7 n7 = message->n7; a8 n8 = message->n8; a9 n9 = message->n9; a10 n10 = message->n10; a11 n11 = message->n11; a12 n12 = message->n12; a13 n13 = message->n13; a14 n14 = message->n14; \
        __dl_##symbol(n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14); \
        return 0; \
    } \
    void symbol(a1 n1, a2 n2, a3 n3, a4 n4, a5 n5, a6 n6, a7 n7, a8 n8, a9 n9, a10 n10, a11 n11, a12 n12, a13 n13, a14 n14) \
    { \
        HYBRIS_DLSYSM(module, &__dl_##symbol, #symbol); \
        MessageHandler handler[1]; \
        Message_##symbol message[1]; \
        handler->handleMessage = (void *(*) (Message* ))handleMessage_##symbol; \
        message->n1 = n1; message->n2 = n2; message->n3 = n3; message->n4 = n4; message->n5 = n5; message->n6 = n6; message->n7 = n7; message->n8 = n8; message->n9 = n9; message->n10 = n10; message->n11 = n11; message->n12 = n12; message->n13 = n13; message->n14 = n14; \
        (void)MessageQueue_push_message(get_call_queue(), (Message* )message, handler); \
    }


#define HYBRIS_IMPLEMENT_VOID_FUNCTION15(module, symbol, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) \
    typedef struct Message_##symbol { \
        Message common; \
        a1 n1; a2 n2; a3 n3; a4 n4; a5 n5; a6 n6; a7 n7; a8 n8; a9 n9; a10 n10; a11 n11; a12 n12; a13 n13; a14 n14; a15 n15; \
    } Message_##symbol; \
    static void (*__dl_##symbol)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) FP_ATTRIB = NULL; \
    static void* handleMessage_##symbol (Message_##symbol* message) FP_ATTRIB; \
    static void* handleMessage_##symbol (Message_##symbol* message) \
    { \
        a1 n1 = message->n1; a2 n2 = message->n2; a3 n3 = message->n3; a4 n4 = message->n4; a5 n5 = message->n5; a6 n6 = message->n6; a7 n7 = message->n7; a8 n8 = message->n8; a9 n9 = message->n9; a10 n10 = message->n10; a11 n11 = message->n11; a12 n12 = message->n12; a13 n13 = message->n13; a14 n14 = message->n14; a15 n15 = message->n15; \
        __dl_##symbol(n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15); \
        return 0; \
    } \
    void symbol(a1 n1, a2 n2, a3 n3, a4 n4, a5 n5, a6 n6, a7 n7, a8 n8, a9 n9, a10 n10, a11 n11, a12 n12, a13 n13, a14 n14, a15 n15) \
    { \
        HYBRIS_DLSYSM(module, &__dl_##symbol, #symbol); \
        MessageHandler handler[1]; \
        Message_##symbol message[1]; \
        handler->handleMessage = (void *(*) (Message* ))handleMessage_##symbol; \
        message->n1 = n1; message->n2 = n2; message->n3 = n3; message->n4 = n4; message->n5 = n5; message->n6 = n6; message->n7 = n7; message->n8 = n8; message->n9 = n9; message->n10 = n10; message->n11 = n11; message->n12 = n12; message->n13 = n13; message->n14 = n14; message->n15 = n15; \
        (void)MessageQueue_push_message(get_call_queue(), (Message* )message, handler); \
    }


#define HYBRIS_IMPLEMENT_VOID_FUNCTION16(module, symbol, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16) \
    typedef struct Message_##symbol { \
        Message common; \
        a1 n1; a2 n2; a3 n3; a4 n4; a5 n5; a6 n6; a7 n7; a8 n8; a9 n9; a10 n10; a11 n11; a12 n12; a13 n13; a14 n14; a15 n15; a16 n16; \
    } Message_##symbol; \
    static void (*__dl_##symbol)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16) FP_ATTRIB = NULL; \
    static void* handleMessage_##symbol (Message_##symbol* message) FP_ATTRIB; \
    static void* handleMessage_##symbol (Message_##symbol* message) \
    { \
        a1 n1 = message->n1; a2 n2 = message->n2; a3 n3 = message->n3; a4 n4 = message->n4; a5 n5 = message->n5; a6 n6 = message->n6; a7 n7 = message->n7; a8 n8 = message->n8; a9 n9 = message->n9; a10 n10 = message->n10; a11 n11 = message->n11; a12 n12 = message->n12; a13 n13 = message->n13; a14 n14 = message->n14; a15 n15 = message->n15; a16 n16 = message->n16; \
        __dl_##symbol(n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16); \
        return 0; \
    } \
    void symbol(a1 n1, a2 n2, a3 n3, a4 n4, a5 n5, a6 n6, a7 n7, a8 n8, a9 n9, a10 n10, a11 n11, a12 n12, a13 n13, a14 n14, a15 n15, a16 n16) \
    { \
        HYBRIS_DLSYSM(module, &__dl_##symbol, #symbol); \
        MessageHandler handler[1]; \
        Message_##symbol message[1]; \
        handler->handleMessage = (void *(*) (Message* ))handleMessage_##symbol; \
        message->n1 = n1; message->n2 = n2; message->n3 = n3; message->n4 = n4; message->n5 = n5; message->n6 = n6; message->n7 = n7; message->n8 = n8; message->n9 = n9; message->n10 = n10; message->n11 = n11; message->n12 = n12; message->n13 = n13; message->n14 = n14; message->n15 = n15; message->n16 = n16; \
        (void)MessageQueue_push_message(get_call_queue(), (Message* )message, handler); \
    }


#define HYBRIS_IMPLEMENT_VOID_FUNCTION17(module, symbol, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17) \
    typedef struct Message_##symbol { \
        Message common; \
        a1 n1; a2 n2; a3 n3; a4 n4; a5 n5; a6 n6; a7 n7; a8 n8; a9 n9; a10 n10; a11 n11; a12 n12; a13 n13; a14 n14; a15 n15; a16 n16; a17 n17; \
    } Message_##symbol; \
    static void (*__dl_##symbol)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17) FP_ATTRIB = NULL; \
    static void* handleMessage_##symbol (Message_##symbol* message) FP_ATTRIB; \
    static void* handleMessage_##symbol (Message_##symbol* message) \
    { \
        a1 n1 = message->n1; a2 n2 = message->n2; a3 n3 = message->n3; a4 n4 = message->n4; a5 n5 = message->n5; a6 n6 = message->n6; a7 n7 = message->n7; a8 n8 = message->n8; a9 n9 = message->n9; a10 n10 = message->n10; a11 n11 = message->n11; a12 n12 = message->n12; a13 n13 = message->n13; a14 n14 = message->n14; a15 n15 = message->n15; a16 n16 = message->n16; a17 n17 = message->n17; \
        __dl_##symbol(n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17); \
        return 0; \
    } \
    void symbol(a1 n1, a2 n2, a3 n3, a4 n4, a5 n5, a6 n6, a7 n7, a8 n8, a9 n9, a10 n10, a11 n11, a12 n12, a13 n13, a14 n14, a15 n15, a16 n16, a17 n17) \
    { \
        HYBRIS_DLSYSM(module, &__dl_##symbol, #symbol); \
        MessageHandler handler[1]; \
        Message_##symbol message[1]; \
        handler->handleMessage = (void *(*) (Message* ))handleMessage_##symbol; \
        message->n1 = n1; message->n2 = n2; message->n3 = n3; message->n4 = n4; message->n5 = n5; message->n6 = n6; message->n7 = n7; message->n8 = n8; message->n9 = n9; message->n10 = n10; message->n11 = n11; message->n12 = n12; message->n13 = n13; message->n14 = n14; message->n15 = n15; message->n16 = n16; message->n17 = n17; \
        (void)MessageQueue_push_message(get_call_queue(), (Message* )message, handler); \
    }


#define HYBRIS_IMPLEMENT_VOID_FUNCTION18(module, symbol, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18) \
    typedef struct Message_##symbol { \
        Message common; \
        a1 n1; a2 n2; a3 n3; a4 n4; a5 n5; a6 n6; a7 n7; a8 n8; a9 n9; a10 n10; a11 n11; a12 n12; a13 n13; a14 n14; a15 n15; a16 n16; a17 n17; a18 n18; \
    } Message_##symbol; \
    static void (*__dl_##symbol)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18) FP_ATTRIB = NULL; \
    static void* handleMessage_##symbol (Message_##symbol* message) FP_ATTRIB; \
    static void* handleMessage_##symbol (Message_##symbol* message) \
    { \
        a1 n1 = message->n1; a2 n2 = message->n2; a3 n3 = message->n3; a4 n4 = message->n4; a5 n5 = message->n5; a6 n6 = message->n6; a7 n7 = message->n7; a8 n8 = message->n8; a9 n9 = message->n9; a10 n10 = message->n10; a11 n11 = message->n11; a12 n12 = message->n12; a13 n13 = message->n13; a14 n14 = message->n14; a15 n15 = message->n15; a16 n16 = message->n16; a17 n17 = message->n17; a18 n18 = message->n18; \
        __dl_##symbol(n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n18); \
        return 0; \
    } \
    void symbol(a1 n1, a2 n2, a3 n3, a4 n4, a5 n5, a6 n6, a7 n7, a8 n8, a9 n9, a10 n10, a11 n11, a12 n12, a13 n13, a14 n14, a15 n15, a16 n16, a17 n17, a18 n18) \
    { \
        HYBRIS_DLSYSM(module, &__dl_##symbol, #symbol); \
        MessageHandler handler[1]; \
        Message_##symbol message[1]; \
        handler->handleMessage = (void *(*) (Message* ))handleMessage_##symbol; \
        message->n1 = n1; message->n2 = n2; message->n3 = n3; message->n4 = n4; message->n5 = n5; message->n6 = n6; message->n7 = n7; message->n8 = n8; message->n9 = n9; message->n10 = n10; message->n11 = n11; message->n12 = n12; message->n13 = n13; message->n14 = n14; message->n15 = n15; message->n16 = n16; message->n17 = n17; message->n18 = n18; \
        (void)MessageQueue_push_message(get_call_queue(), (Message* )message, handler); \
    }


#define HYBRIS_IMPLEMENT_VOID_FUNCTION19(module, symbol, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19) \
    typedef struct Message_##symbol { \
        Message common; \
        a1 n1; a2 n2; a3 n3; a4 n4; a5 n5; a6 n6; a7 n7; a8 n8; a9 n9; a10 n10; a11 n11; a12 n12; a13 n13; a14 n14; a15 n15; a16 n16; a17 n17; a18 n18; a19 n19; \
    } Message_##symbol; \
    static void (*__dl_##symbol)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19) FP_ATTRIB = NULL; \
    static void* handleMessage_##symbol (Message_##symbol* message) FP_ATTRIB; \
    static void* handleMessage_##symbol (Message_##symbol* message) \
    { \
        a1 n1 = message->n1; a2 n2 = message->n2; a3 n3 = message->n3; a4 n4 = message->n4; a5 n5 = message->n5; a6 n6 = message->n6; a7 n7 = message->n7; a8 n8 = message->n8; a9 n9 = message->n9; a10 n10 = message->n10; a11 n11 = message->n11; a12 n12 = message->n12; a13 n13 = message->n13; a14 n14 = message->n14; a15 n15 = message->n15; a16 n16 = message->n16; a17 n17 = message->n17; a18 n18 = message->n18; a19 n19 = message->n19; \
        __dl_##symbol(n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n18, n19); \
        return 0; \
    } \
    void symbol(a1 n1, a2 n2, a3 n3, a4 n4, a5 n5, a6 n6, a7 n7, a8 n8, a9 n9, a10 n10, a11 n11, a12 n12, a13 n13, a14 n14, a15 n15, a16 n16, a17 n17, a18 n18, a19 n19) \
    { \
        HYBRIS_DLSYSM(module, &__dl_##symbol, #symbol); \
        MessageHandler handler[1]; \
        Message_##symbol message[1]; \
        handler->handleMessage = (void *(*) (Message* ))handleMessage_##symbol; \
        message->n1 = n1; message->n2 = n2; message->n3 = n3; message->n4 = n4; message->n5 = n5; message->n6 = n6; message->n7 = n7; message->n8 = n8; message->n9 = n9; message->n10 = n10; message->n11 = n11; message->n12 = n12; message->n13 = n13; message->n14 = n14; message->n15 = n15; message->n16 = n16; message->n17 = n17; message->n18 = n18; message->n19 = n19; \
        (void)MessageQueue_push_message(get_call_queue(), (Message* )message, handler); \
    }


/**
 *         XXX AUTO-GENERATED FILE XXX
 *
 * Do not edit this file directly, but update the templates in
 * utils/generate_wrapper_macros.py and run it again to build
 * an updated version of this header file:
 *
 *    python utils/generate_wrapper_macros.py > \
 *       hybris/include/hybris/internal/binding.h
 *
 * If you need macros with more arguments, just customize the
 * MAX_ARGS variable in generate_wrapper_macros.py.
 *
 *         XXX AUTO-GENERATED FILE XXX
 **/


#endif /* HYBRIS_BINDING_H_ */

